# Github automation to build the project and zip the files

name: Create Release Candidate
on:
  pull_request:
    branches:
      - production

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18.x'
    
    - name: Install  (tailwindcss, daisyUI, postcss etc)
      run: npm install
  
    - name: Get latest tag
      id: get_latest_tag
      uses: actions-ecosystem/action-get-latest-tag@v1

    - name: Bump version
      id: bump_version
      run: |
        latest_tag=${{ steps.get_latest_tag.outputs.tag }}
        echo "Current tag: $latest_tag"
        if [[ $latest_tag =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          IFS='.' read -ra parts <<< "$latest_tag"
          major=${parts[0]}
          minor=${parts[1]}
          patch=${parts[2]}
          echo "major: $major, minor: $minor, patch: $patch"
          echo "v$major.$minor.$((patch + 1))"
          new_version="$major.$minor.$((patch + 1))"
        else
          echo "Could not parse previous tag, creating non-serialezed RC version"
          new_version="x.x.x"
        fi
        sha=$(git rev-parse --short HEAD)
        rc="$new_version-rc-$sha"
        echo "new_version=$rc" >> $GITHUB_ENV

    - name: Set new version
    # Change the version number in postcss.config.js
      run: sed -i "s/1.1.18/${{ env.new_version }}/g" postcss.config.js

    - name: Build CSS
      run: npm run build:css

    - name: Package theme
      run: npm run bundle

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.new_version }}
        release_name: v${{ env.new_version }}
        draft: false
        prerelease: true

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./join-the-club.zip
        asset_name: join-the-club.zip
        asset_content_type: application/zip
